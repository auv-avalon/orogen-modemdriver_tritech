name "modemdriver"
using_library "modemdriver_tritech"
using_task_library "canbus"
import_types_from "modemdriverTypes.hpp"
import_types_from 'base'
import_types_from "canbus"

task_context "Modem" do
    needs_configuration
    input_port "data_in", "std/vector<char>" 
    output_port "data_out", "std/vector<char>"

    #Time to wait between requesting range-measurments
    property("distance_request_interval","double", 0.0).dynamic

    #todo check datatype, the distance to the surface-modem
    output_port("distance","double")

    periodic 0.1
end

task_context "ModemSerial" do
    subclasses 'Modem' 
    property "serial_device", "/std/string"
    periodic 0.1
end

task_context "ModemCanbus" do 
    subclasses 'Modem' 
    input_port "can_in", "/canbus/Message"
    output_port "can_out", "/canbus/Message"
    periodic 0.1
end

deployment 'modemdriver_cantest' do
#    task('can', "canbus::Task").
#        periodic(0.1)
    task('modemdriver', "ModemCanbus")
end
